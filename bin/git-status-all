#!/bin/bash

# Function to check git status
check_git_status() {
    local dir="$1"
    local project=$(basename "$dir")
    
    if [ -d "$dir/.git" ]; then
        cd "$dir"
        
        # Check for types:watch and build:watch scripts
        local types_watch=""
        local build_watch=""
        if [ -f "package.json" ]; then
            types_watch=$(jq -r '.scripts."types:watch" // ""' package.json 2>/dev/null || echo "")
            build_watch=$(jq -r '.scripts."build:watch" // ""' package.json 2>/dev/null || echo "")
        fi
        
        # Check for Makefile
        local has_makefile=""
        if [ -f "Makefile" ]; then
            has_makefile="âœ“"
        fi
        
        # Check for uncommitted changes
        if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
            echo "$project|$has_makefile|error|$types_watch|$build_watch"
            return
        fi
        
        # Check for unpushed commits
        local branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -n "$branch" ] && [ "$branch" != "HEAD" ]; then
            local upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
            if [ -n "$upstream" ]; then
                local ahead=$(git rev-list --count @{u}..HEAD 2>/dev/null)
                if [ "$ahead" -gt 0 ]; then
                    echo "$project|$has_makefile|error|$types_watch|$build_watch"
                    return
                fi
            else
                echo "$project|$has_makefile|error|$types_watch|$build_watch"
                return
            fi
        fi
        
        # All good
        echo "$project|$has_makefile|ok|$types_watch|$build_watch"
    fi
}

# Collect all results first
results=()
for dir in ~/code/*/; do
    if [ -d "$dir" ]; then
        # Skip backups and worktrees directories
        basename_dir=$(basename "$dir")
        if [ "$basename_dir" != "backups" ] && [ "$basename_dir" != "worktrees" ]; then
            result=$(check_git_status "$dir")
            if [ -n "$result" ]; then
                results+=("$result")
            fi
        fi
    fi
done

# Find the longest values for proper column widths
max_repo_len=10  # Minimum width for "Repository" header
max_types_len=11  # Minimum width for "types:watch" header
max_build_len=11  # Minimum width for "build:watch" header
max_makefile_len=8  # Minimum width for "Makefile" header
for result in "${results[@]}"; do
    IFS='|' read -r repo has_makefile state types_watch build_watch <<< "$result"
    if [ ${#repo} -gt $max_repo_len ]; then
        max_repo_len=${#repo}
    fi
    if [ ${#types_watch} -gt $max_types_len ]; then
        max_types_len=${#types_watch}
    fi
    if [ ${#build_watch} -gt $max_build_len ]; then
        max_build_len=${#build_watch}
    fi
    if [ ${#has_makefile} -gt $max_makefile_len ]; then
        max_makefile_len=${#has_makefile}
    fi
done

# Print header
printf "%-${max_repo_len}s | %-${max_makefile_len}s | %-6s | %-${max_types_len}s | %-${max_build_len}s\n" "Repository" "Makefile" "Status" "types:watch" "build:watch"
printf "%s | %s | %s | %s | %s\n" "$(printf '%*s' $max_repo_len | tr ' ' '-')" "$(printf '%*s' $max_makefile_len | tr ' ' '-')" "------" "$(printf '%*s' $max_types_len | tr ' ' '-')" "$(printf '%*s' $max_build_len | tr ' ' '-')"

# Print results
for result in "${results[@]}"; do
    IFS='|' read -r repo has_makefile state types_watch build_watch <<< "$result"
    if [ "$state" = "error" ]; then
        status="x"
    else
        status=""
    fi
    printf "%-${max_repo_len}s | %-${max_makefile_len}s | %-6s | %-${max_types_len}s | %-${max_build_len}s\n" "$repo" "$has_makefile" "$status" "$types_watch" "$build_watch"
done