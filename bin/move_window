#!/usr/bin/env python

import os
import time
import Xlib.display
import numpy as np
from pprint import pprint

# def get_number_of_items_in_list_spaced_evenly(number_of_items, items):
#   return items[np.round(np.linspace(0, len(items)-1, number_of_items)).astype(int)]

# number_of_items = 34
# items = np.arange(100)
# print(items)
# print(get_number_of_items_in_list_spaced_evenly(number_of_items, items))

WINDOW_NAME_SUBSTRING = 'Hacker News'
TRANSITION_TIME_MS = 1000
TRANSITION_FPS = 60

d = Xlib.display.Display()
r = d.screen().root

def find_window():
    window_ids = r.get_full_property(
        d.intern_atom('_NET_CLIENT_LIST'), Xlib.X.AnyPropertyType
    ).value

    found_window = None

    for window_id in window_ids:
        current_window = d.create_resource_object('window', window_id)
        window_name = current_window.get_wm_name()
        window_class = current_window.get_wm_class()
        if type(window_name) != type(b'') and WINDOW_NAME_SUBSTRING in window_name:
            found_window = current_window
            break

    if not found_window:
        return [None, None]

    return [found_window, window_id]

def move_window_to_x_offset(window, offset):
    frame = window.query_tree().parent
    x = frame.get_geometry()._data['x']
    window.configure(x=x + offset)
    d.sync()

def move_window_to_position(window, x, y):
    window.configure(x=x, y=y)
    d.sync()

window, window_id = find_window()

if window:
    move_window_to_position(window, 0, 0)
    for n in range(60):
        print(window_id)
        time.sleep(0.016)
        move_window_to_x_offset(window, 10)
else:
    print('No window found')
    exit(1)
