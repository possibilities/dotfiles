# Load aliases
if [ -e "$HOME/.aliases" ]; then
  source "$HOME/.aliases"
fi

# Load private environment variables
if [ -e "$HOME/.private_environment" ]; then
  source "$HOME/.private_environment"
fi

# List all projects in ~/code with their names and descriptions
list-projects() {
  local code_dir="$HOME/code"
  local max_name_length=0
  local projects=()
  
  # Find all package.json files and get max name length
  while IFS= read -r package_json; do
    if [[ -f "$package_json" ]]; then
      local dir=$(dirname "$package_json")
      local name=$(jq -r '.name // ""' "$package_json" 2>/dev/null)
      local description=$(jq -r '.description // ""' "$package_json" 2>/dev/null)
      
      if [[ -n "$name" ]]; then
        projects+=("$name|$description|$dir")
        if (( ${#name} > max_name_length )); then
          max_name_length=${#name}
        fi
      fi
    fi
  done < <(find "$code_dir" -maxdepth 2 -name "package.json" -not -path "*/node_modules/*" 2>/dev/null | sort)
  
  # Print header
  printf "\n%-${max_name_length}s  %s\n" "PROJECT" "DESCRIPTION"
  printf "%${max_name_length}s  %s\n" | tr ' ' '-' | sed 's/./-/g'
  
  # Print projects
  for project in "${projects[@]}"; do
    IFS='|' read -r name description dir <<< "$project"
    printf "%-${max_name_length}s  %s\n" "$name" "${description:-No description}"
  done
  
  echo
}

# Ignore duplicate history entries
setopt histignoredups

# Ignore commands that start with a space
setopt HIST_IGNORE_SPACE

# Allow comments in shell
setopt interactivecomments

# Automatically change into directories without `cd`
setopt auto_cd

# automatically pushd
setopt auto_pushd
export dirstacksize=5

# Enable extended globbing
setopt EXTENDED_GLOB

# Use nvim as an editor
export EDITOR='nvim'
export VISUAL='nvim'

# Default terminal
export TERMINAL='alacritty'

source ${HOME}/.igloo.zsh
source ${HOME}/.git-prompt.sh

# Configure lab completions
source <(lab completion zsh)

# Load zsh completions installed by apps
fpath+=/home/mike/.zsh_functions

# Configure NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Load nord dircolors for ls, tree, etc
test -r "~/.dir_colors" && eval $(dircolors ~/.dir_colors)

# Ssh agent magic
eval `keychain --eval --quiet --ignore-missing --agents ssh id_ed25519`
eval `keychain --eval --quiet --ignore-missing --agents ssh id_rsa`

# export PYENV_ROOT="$HOME/.pyenv"
# command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"

# Deno
# export DENO_INSTALL="/home/mike/.deno"
# export PATH="$DENO_INSTALL/bin:$PATH"

# bun completions
[ -s "/home/mike/.bun/_bun" ] && source "/home/mike/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="/home/mike/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

alias claude="/home/mike/.claude/local/claude"
