# Utils
alias vim='nvim'
alias mkdir='mkdir -p'
# note trailing space is needed to support watching aliased commands
alias watch='watch --color --no-title '
alias watchx='watch --color --no-title -x '
alias less='less -R '
alias zh='cat $HOME/.zsh_history'
alias woman='man'

# apps
alias g="git"
alias p="pnpm"
alias t="tmux"
alias ta="tmux attach"
alias tnd="tmux_name_window_after_directory"
alias tn="tmux_name_window"
alias tc="tmux -S /tmp/control-app-tmux"
alias tac="tmux -S /tmp/control-app-tmux attach"
alias a='autocil'
alias grh="grep_history"
alias gsa="git-status-all"

alias misc="git add . ; git ci -am'Misc'"
alias miscpush="git add . ; git ci -am'Misc' ; git push"
alias mp="git add . ; git ci -am'Misc' ; git push"
alias wip="git add .; git commit --no-verify -a -m 'wip [skip ci]'"
alias wipush="git add .; git commit --no-verify -a -m 'wip [skip ci]' ; git push"

alias mr="lab mr create origin develop --assignee possibilities --remove-source-branch --squash"
alias pr="hub pull-request"

alias ls="ls --color=auto"

# vpn
alias vs='nordvpn status'
alias vu='nordvpn connect New_York && nordvpn set killswitch on'
alias vd='nordvpn disconnect'
alias vk='nordvpn set killswitch on'
alias vko='nordvpn set killswitch off'

alias copy='xclip -selection clipboard'
alias clip='xclip -selection clipboard'
alias clipboard='xclip -selection clipboard'

alias claude='~/.claude/local/claude'
alias claude-safe='claude'
alias cs='claude-sessions'
alias claude-upgrade='(
    echo "Checking for Claude updates..." && 
    old_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    echo "Current version: $old_version" && 
    cd ~/.claude/local && 
    npm update @anthropic-ai/claude-code && 
    new_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    if [ "$old_version" = "$new_version" ]; then 
        echo "No updates available."; 
    else 
        echo "Successfully updated to version $new_version"; 
    fi
)'

source $HOME/.worktree-helpers
source $HOME/.session-helpers

gap() {
    local clipboard_content=$(xclip -selection clipboard -o)
    
    if ! echo "$clipboard_content" | grep -q "git apply"; then
        echo "Error: Clipboard doesn't contain a git apply command"
        return 1
    fi
    
    local patch_content=$(echo "$clipboard_content" | sed -n '/^diff --git/,/^EOF/p' | sed '$d')
    
    if [ -z "$patch_content" ]; then
        echo "Error: Could not extract patch content"
        return 1
    fi
    
    echo "$patch_content" | git apply --3way
}
