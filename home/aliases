# Utils
alias vim='nvim'
alias mkdir='mkdir -p'
# note trailing space is needed to support watching aliased commands
alias watch='watch --color --no-title '
alias watchx='watch --color --no-title -x '
alias less='less -R '
alias zh='cat $HOME/.zsh_history'
alias woman='man'

# apps
alias g="git"
alias p="pnpm"
alias t="tmux"
alias a='autocil'
alias ta="tmux attach"
alias tnd="tmux_name_window_after_directory"
alias tn="tmux_name_window"
alias grh="grep_history"

alias misc="git add . ; git ci -am'Misc'"
alias miscpush="git add . ; git ci -am'Misc' ; git push"
alias mp="git add . ; git ci -am'Misc' ; git push"
alias wip="git add .; git commit --no-verify -a -m 'wip [skip ci]'"
alias wipush="git add .; git commit --no-verify -a -m 'wip [skip ci]' ; git push"

alias mr="lab mr create origin develop --assignee possibilities --remove-source-branch --squash"
alias pr="hub pull-request"

alias ls="ls --color=auto"

# vpn
alias vs='nordvpn status'
alias vu='nordvpn connect New_York && nordvpn set killswitch on'
alias vd='nordvpn disconnect'
alias vk='nordvpn set killswitch on'
alias vko='nordvpn set killswitch off'

alias copy='xclip -selection clipboard'
alias clip='xclip -selection clipboard'
alias clipboard='xclip -selection clipboard'

worktree-create() {
    # Check if we're already in a worktree directory
    if [[ "$PWD" == *"/worktrees/"*"-worktree-"* ]]; then
        echo "Error: Cannot create a worktree inside a worktree"
        return 1
    fi
    
    worktrees_dir="$(dirname "$PWD")/worktrees"
    mkdir -p "$worktrees_dir"
    i=1
    while [ -e "$worktrees_dir/$(basename "$PWD")-worktree-$(printf "%03d" "$i")" ] || git branch --list "worktree-$(printf "%03d" "$i")" | grep -q .; do
        i=$((i+1))
    done
    num=$(printf "%03d" $i)
    dir="$worktrees_dir/$(basename "$PWD")-worktree-$num" && \
    git worktree add "$dir" -b "worktree-$num" && \
    cd "$dir" && \
    ([ -f pnpm-lock.yaml ] && pnpm install || true) && \
    ([ -f uv.lock ] && uv sync || true)
}

worktree-kill() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != *"/worktrees/"*"-worktree-"* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Navigate to the main project directory
    cd "$(dirname "$(dirname "$worktree_path")")/$project_name"

    # Remove the worktree
    git worktree remove --force "$worktree_path"

    echo "Removed worktree: $branch"
}

worktree-merge() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != *"/worktrees/"*"-worktree-"* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Check for pending changes
    if ! git diff-index --quiet HEAD -- || ! git diff --cached --quiet; then
        echo "Error: There are pending changes in the worktree. Please commit or stash them first."
        return 1
    fi

    # Check for untracked files
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        echo "Error: There are untracked files in the worktree. Please add or remove them first."
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Save current directory
    local original_dir="$PWD"
    
    # Navigate to the main project directory
    main_dir="$(dirname "$(dirname "$worktree_path")")/$project_name"
    
    # Run operations in main directory
    (
        cd "$main_dir" || exit 1
        
        # Switch to main branch
        git checkout main || exit 1
        
        # Cherry-pick all commits from the worktree branch
        if git cherry-pick main.."$branch"; then
            echo "Successfully cherry-picked commits from $branch into main"
            
            # Push the changes to origin
            if git push origin HEAD -u; then
                echo "Successfully pushed changes to origin"
            else
                echo "Warning: Failed to push changes to origin"
            fi
            
            # Success - we'll handle worktree removal outside the subshell
            exit 0
        else
            echo "Error: Cherry-pick failed. Please resolve conflicts manually."
            echo "You are in: $(pwd)"
            echo "To return to worktree, run: cd $worktree_path"
            exit 1
        fi
    )
    
    # Check if the subshell succeeded
    if [ $? -eq 0 ]; then
        # Cherry-pick succeeded, remove the worktree
        worktree-kill
    else
        # Cherry-pick failed, make sure we're back in the worktree
        cd "$original_dir"
        return 1
    fi
}

