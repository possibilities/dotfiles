# Utils
alias vim='nvim'
alias mkdir='mkdir -p'
# note trailing space is needed to support watching aliased commands
alias watch='watch --color --no-title '
alias watchx='watch --color --no-title -x '
alias less='less -R '
alias zh='cat $HOME/.zsh_history'
alias woman='man'

# apps
alias g="git"
alias p="pnpm"
alias t="tmux"
alias ta="tmux attach"
alias tnd="tmux_name_window_after_directory"
alias tn="tmux_name_window"
alias tc="tmux -S /tmp/control-app-tmux"
alias tac="tmux -S /tmp/control-app-tmux attach"
alias a='autocil'
alias grh="grep_history"
alias gsa="git-status-all"

alias misc="git add . ; git ci -am'Misc'"
alias miscpush="git add . ; git ci -am'Misc' ; git push"
alias mp="git add . ; git ci -am'Misc' ; git push"
alias wip="git add .; git commit --no-verify -a -m 'wip [skip ci]'"
alias wipush="git add .; git commit --no-verify -a -m 'wip [skip ci]' ; git push"

alias mr="lab mr create origin develop --assignee possibilities --remove-source-branch --squash"
alias pr="hub pull-request"

alias ls="ls --color=auto"

# vpn
alias vs='nordvpn status'
alias vu='nordvpn connect New_York && nordvpn set killswitch on'
alias vd='nordvpn disconnect'
alias vk='nordvpn set killswitch on'
alias vko='nordvpn set killswitch off'

alias copy='xclip -selection clipboard'
alias clip='xclip -selection clipboard'
alias clipboard='xclip -selection clipboard'

alias claude='~/.claude/local/claude'
alias claude-safe='claude'
alias cs='claude-sessions'
alias claude-upgrade='(
    echo "Checking for Claude updates..." && 
    old_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    echo "Current version: $old_version" && 
    cd ~/.claude/local && 
    npm update @anthropic-ai/claude-code && 
    new_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    if [ "$old_version" = "$new_version" ]; then 
        echo "No updates available."; 
    else 
        echo "Successfully updated to version $new_version"; 
    fi
)'

bt-connect() {
    local paired_devices=$(bluetoothctl devices Paired | grep -i "headphone\|earphone\|airpod\|buds\|wh-\|wf-")
    
    if [ -z "$paired_devices" ]; then
        echo "No paired headphones found"
        return 1
    fi
    
    echo "$paired_devices" | while read -r line; do
        local mac_address=$(echo "$line" | awk '{print $2}')
        local device_name=$(echo "$line" | cut -d' ' -f3-)
        
        echo "Attempting to connect to $device_name ($mac_address)..."
        bluetoothctl connect "$mac_address" && {
            echo "Successfully connected to $device_name"
            return 0
        }
    done
}

bt-disconnect() {
    local connected_devices=$(bluetoothctl devices Connected | grep -i "headphone\|earphone\|airpod\|buds\|wh-\|wf-")
    
    if [ -z "$connected_devices" ]; then
        echo "No connected headphones found"
        return 1
    fi
    
    echo "$connected_devices" | while read -r line; do
        local mac_address=$(echo "$line" | awk '{print $2}')
        local device_name=$(echo "$line" | cut -d' ' -f3-)
        
        echo "Disconnecting from $device_name ($mac_address)..."
        bluetoothctl disconnect "$mac_address" && {
            echo "Successfully disconnected from $device_name"
        }
    done
}

claude-work() {
    if [ $# -eq 0 ]; then
        dirty-confirm && claude-inject && claude --mcp-config ./.claude/inject-mcps.json
    else
        dirty-confirm && claude-inject && claude "$(context-composer "$1")" --mcp-config ./.claude/inject-mcps.json ${@:2}
    fi
}

claude-work-continue() {
    dirty-confirm && claude-inject && claude --continue --mcp-config ./.claude/inject-mcps.json ${@:1}
}

commit-work() {
    rm -rf ./.claude ; commit-creator "$@"
}

source $HOME/.worktree-helpers
source $HOME/.session-helpers

gap() {
    local clipboard_content=$(xclip -selection clipboard -o)
    
    if ! echo "$clipboard_content" | grep -q "git apply"; then
        echo "Error: Clipboard doesn't contain a git apply command"
        return 1
    fi
    
    local patch_content=$(echo "$clipboard_content" | sed -n '/^diff --git/,/^EOF/p' | sed '$d')
    
    if [ -z "$patch_content" ]; then
        echo "Error: Could not extract patch content"
        return 1
    fi
    
    echo "$patch_content" | git apply --3way
}

create-new-cli-app() {
    if [ $# -eq 0 ]; then
        echo "Error: create-new-cli-app requires a project name argument" >&2
        echo "Usage: create-new-cli-app <project-name>" >&2
        return 1
    fi
    
    local project_name="$1"
    local source_dir="$HOME/code/commanderjs-template"
    local target_dir="$HOME/code/$project_name"
    
    # Check if source template exists
    if [ ! -d "$source_dir" ]; then
        echo "Error: Template directory not found at $source_dir" >&2
        return 1
    fi
    
    # Check if target directory already exists
    if [ -d "$target_dir" ]; then
        echo "Error: Directory $target_dir already exists" >&2
        return 1
    fi
    
    # Clone the template
    echo "Creating new CLI app: $project_name"
    cp -r "$source_dir" "$target_dir" || {
        echo "Error: Failed to copy template" >&2
        return 1
    }
    
    # Change to the new project directory
    cd "$target_dir" || {
        echo "Error: Failed to cd into $target_dir" >&2
        return 1
    }
    
    # Remove existing .git directory
    rm -rf .git
    
    # Initialize new git repository
    git init
    
    # Create initial commit
    commit-creator
    
    # Run rebrand command
    claude /rebrand-cli
}

create-new-ui-app() {
    if [ $# -eq 0 ]; then
        echo "Error: create-new-ui-app requires a project name argument" >&2
        echo "Usage: create-new-ui-app <project-name>" >&2
        return 1
    fi
    
    local project_name="$1"
    local source_dir="$HOME/code/nextjs-template"
    local target_dir="$HOME/code/$project_name"
    
    # Check if source template exists
    if [ ! -d "$source_dir" ]; then
        echo "Error: Template directory not found at $source_dir" >&2
        return 1
    fi
    
    # Check if target directory already exists
    if [ -d "$target_dir" ]; then
        echo "Error: Directory $target_dir already exists" >&2
        return 1
    fi
    
    # Clone the template
    echo "Creating new UI app: $project_name"
    cp -r "$source_dir" "$target_dir" || {
        echo "Error: Failed to copy template" >&2
        return 1
    }
    
    # Change to the new project directory
    cd "$target_dir" || {
        echo "Error: Failed to cd into $target_dir" >&2
        return 1
    }
    
    # Remove existing .git directory
    rm -rf .git
    
    # Initialize new git repository
    git init
    
    # Create initial commit
    commit-creator
    
    # Run rebrand command
    claude /rebrand-ui
}
