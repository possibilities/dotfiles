# Utils
alias vim='nvim'
alias mkdir='mkdir -p'
# note trailing space is needed to support watching aliased commands
alias watch='watch --color --no-title '
alias watchx='watch --color --no-title -x '
alias less='less -R '
alias zh='cat $HOME/.zsh_history'
alias woman='man'

# apps
alias g="git"
alias p="pnpm"
alias t="tmux"
alias ta="tmux attach"
alias tnd="tmux_name_window_after_directory"
alias tn="tmux_name_window"
alias tc="tmux -S /tmp/control-app-tmux"
alias tac="tmux -S /tmp/control-app-tmux attach"
alias a='autocil'
alias grh="grep_history"
alias gsa="git-status-all"
alias sdp="show-dirty-projects"
alias cdp="commit-dirty-projects"
alias srv="show-repo-visibility"

alias misc="git add . ; git ci -am'Misc'"
alias miscpush="git add . ; git ci -am'Misc' ; git push"
alias mp="git add . ; git ci -am'Misc' ; git push"
alias wip="git add .; git commit --no-verify -a -m 'wip [skip ci]'"
alias wipush="git add .; git commit --no-verify -a -m 'wip [skip ci]' ; git push"

alias mr="lab mr create origin develop --assignee possibilities --remove-source-branch --squash"
alias pr="hub pull-request"

alias ls="ls --color=auto"

# vpn
alias vs='nordvpn status'
alias vu='nordvpn connect New_York && nordvpn set killswitch on'
alias vd='nordvpn disconnect'
alias vk='nordvpn set killswitch on'
alias vko='nordvpn set killswitch off'

alias copy='xclip -selection clipboard'
alias clip='xclip -selection clipboard'
alias clipboard='xclip -selection clipboard'

alias claude-upgrade='(
    echo "Checking for Claude updates..." && 
    old_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    echo "Current version: $old_version" && 
    cd ~/.claude/local && 
    npm update @anthropic-ai/claude-code && 
    new_version=$(claude --version 2>/dev/null | grep -oP "\\d+\\.\\d+\\.\\d+") && 
    if [ "$old_version" = "$new_version" ]; then 
        echo "No updates available."; 
    else 
        echo "Successfully updated to version $new_version"; 
    fi
)'

claude-work() {
    if [ $# -eq 0 ]; then
        dirty-confirm && claude-inject && claude --mcp-config ./.claude/inject-mcps.json
    else
        case "$1" in
            /*|\"*|\'*|-*)
                # Argument starts with /, ", ', or - - valid
                ;;
            *)
                echo "Error: First argument must start with /, \", ', or -" >&2
                return 1
                ;;
        esac
        
        # Extract command name (part after the slash)
        local command_name="${1#/}"
        local command_file="$HOME/.claude/commands/${command_name}.md"
        
        # Check if command file exists
        if [ ! -f "$command_file" ]; then
            echo "Error: Command file not found: $command_file" >&2
            return 1
        fi
        
        dirty-confirm && claude-inject && claude $1 --mcp-config ./.claude/inject-mcps.json ${@:2}
    fi
}

claude-work-continue() {
    dirty-confirm && claude-inject && claude --continue --mcp-config ./.claude/inject-mcps.json ${@:1}
}

commit-work() {
    rm -rf ./.claude ; commit-composer "$@"
}

create-new-cli-app() {
    if [ $# -eq 0 ]; then
        echo "Error: create-new-cli-app requires a project name argument" >&2
        echo "Usage: create-new-cli-app <project-name>" >&2
        return 1
    fi
    
    local project_name="$1"
    local source_dir="$HOME/code/commanderjs-template"
    local target_dir="$HOME/code/$project_name"
    
    # Check if source template exists
    if [ ! -d "$source_dir" ]; then
        echo "Error: Template directory not found at $source_dir" >&2
        return 1
    fi
    
    # Check if target directory already exists
    if [ -d "$target_dir" ]; then
        echo "Error: Directory $target_dir already exists" >&2
        return 1
    fi
    
    # Clone the template
    echo "Creating new CLI app: $project_name"
    cp -r "$source_dir" "$target_dir" || {
        echo "Error: Failed to copy template" >&2
        return 1
    }
    
    # Change to the new project directory
    cd "$target_dir" || {
        echo "Error: Failed to cd into $target_dir" >&2
        return 1
    }
    
    # Remove existing .git directory
    rm -rf .git
    
    # Initialize new git repository
    git init
    
    # Create initial commit
    commit-composer || {
        echo "Error: Failed to create initial commit" >&2
        return 1
    }
    

    dirty-confirm && claude-inject && claude /rebrand-cli --mcp-config ./.claude/inject-mcps.json
}

create-new-ui-app() {
    if [ $# -eq 0 ]; then
        echo "Error: create-new-ui-app requires a project name argument" >&2
        echo "Usage: create-new-ui-app <project-name>" >&2
        return 1
    fi
    
    local project_name="$1"
    local source_dir="$HOME/code/nextjs-template"
    local target_dir="$HOME/code/$project_name"
    
    # Check if source template exists
    if [ ! -d "$source_dir" ]; then
        echo "Error: Template directory not found at $source_dir" >&2
        return 1
    fi
    
    # Check if target directory already exists
    if [ -d "$target_dir" ]; then
        echo "Error: Directory $target_dir already exists" >&2
        return 1
    fi
    
    # Clone the template
    echo "Creating new UI app: $project_name"
    cp -r "$source_dir" "$target_dir" || {
        echo "Error: Failed to copy template" >&2
        return 1
    }
    
    # Change to the new project directory
    cd "$target_dir" || {
        echo "Error: Failed to cd into $target_dir" >&2
        return 1
    }
    
    # Remove existing .git directory
    rm -rf .git
    
    # Initialize new git repository
    git init
    
    # Create initial commit
    commit-composer || {
        echo "Error: Failed to create initial commit" >&2
        return 1
    }
    
    # Run rebrand command
    dirty-confirm && claude-inject && claude /rebrand-ui --mcp-config ./.claude/inject-mcps.json
}

release-all-projects() {
    local dry_run=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run|-d)
                dry_run=true
                shift
                ;;
            *)
                echo "Error: Unknown option $1" >&2
                echo "Usage: release-all-projects [--dry-run|-d]" >&2
                return 1
                ;;
        esac
    done
    
    local projects_found=0
    local projects_needing_release=0
    local current_dir=$(pwd)
    local dirty_projects=()
    local releasable_projects=()
    
    # Iterate through directories in ~/code
    for dir in "$HOME/code"/*; do
        # Skip if not a directory
        [ ! -d "$dir" ] && continue
        
        # Get directory name
        local project_name=$(basename "$dir")
        
        # Skip release-script directory
        [ "$project_name" = "release-script" ] && continue
        
        # Check if release.sh exists
        [ ! -f "$dir/release.sh" ] && continue
        
        # Check if package.json exists
        if [ ! -f "$dir/package.json" ]; then
            echo "Warning: $project_name has release.sh but no package.json, skipping"
            continue
        fi
        
        projects_found=$((projects_found + 1))
        
        # Change to project directory
        cd "$dir" || continue
        
        # Get current version from package.json
        local current_version=$(grep -o '"version":[[:space:]]*"[^"]*"' package.json | sed 's/.*"version":[[:space:]]*"\([^"]*\)".*/\1/')
        
        if [ -z "$current_version" ]; then
            echo "Warning: Could not determine version for $project_name, skipping"
            cd "$current_dir"
            continue
        fi
        
        # Check if there are commits since the last version tag
        local version_tag="v$current_version"
        local commits_since_tag=0
        
        # Check if the version tag exists
        if git rev-parse "$version_tag" >/dev/null 2>&1; then
            commits_since_tag=$(git rev-list "$version_tag"..HEAD --count 2>/dev/null || echo 0)
        else
            # If tag doesn't exist, count all commits
            commits_since_tag=$(git rev-list HEAD --count 2>/dev/null || echo 0)
        fi
        
        if [ "$commits_since_tag" -gt 0 ]; then
            projects_needing_release=$((projects_needing_release + 1))
            
            # Store project info for later display
            releasable_projects+=("$project_name|$current_version|$commits_since_tag")
            
            # Check if project is dirty (has uncommitted changes)
            if [ -n "$(git status --porcelain)" ]; then
                dirty_projects+=("$project_name")
            fi
        fi
        
        # Return to original directory
        cd "$current_dir"
    done
    
    # Display results and get confirmation
    if [ "$dry_run" = true ]; then
        echo "=== DRY RUN MODE - No releases will be performed ==="
        echo
    fi
    
    if [ $projects_needing_release -eq 0 ]; then
        echo "No projects need releasing."
        return 0
    fi
    
    # Show releasable projects
    echo "📦 Projects that need releasing:"
    echo
    for project_info in "${releasable_projects[@]}"; do
        IFS='|' read -r name version commits <<< "$project_info"
        echo "  - $name (v$version) - $commits commits since last release"
    done
    echo
    
    # Show warning about dirty projects if any
    if [ ${#dirty_projects[@]} -gt 0 ]; then
        echo -e "\033[33m⚠️  Warning: The following projects have uncommitted changes:\033[0m"
        for project in "${dirty_projects[@]}"; do
            echo -e "\033[33m   - $project\033[0m"
        done
        echo -e "\033[33mCommit or discard changes before releasing these projects.\033[0m"
        echo
    fi
    
    # Prompt for confirmation if not in dry-run mode
    if [ "$dry_run" = false ]; then
        echo -n "Release these $projects_needing_release projects? [y/N] "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Aborted."
            return 0
        fi
        echo
        
        # Now perform the releases
        for project_info in "${releasable_projects[@]}"; do
            IFS='|' read -r project_name version commits <<< "$project_info"
            
            echo "📦 Releasing $project_name..."
            cd "$HOME/code/$project_name" || continue
            
            echo "   Running: pnpm run release:patch"
            pnpm run release:patch
            echo
            
            cd "$current_dir"
        done
    fi
    
    echo "═══════════════════════════════════════════════════════════"
    echo "Scanned $projects_found projects with release.sh"
    echo "$projects_needing_release projects need releasing"
    
    if [ "$dry_run" = true ] && [ "$projects_needing_release" -gt 0 ]; then
        echo
        echo "Run 'release-all-projects' without --dry-run to perform releases"
    fi
}

update-release-scripts() {
    local source_release="$HOME/code/release-script/release.sh"
    local current_dir=$(pwd)
    local updated_projects=()
    local dirty_projects=()
    local projects_checked=0
    local projects_updated=0
    
    # Check if source release.sh exists
    if [ ! -f "$source_release" ]; then
        echo "Error: Source release.sh not found at $source_release" >&2
        return 1
    fi
    
    echo "Updating release.sh files across all projects..."
    echo
    
    # Find all projects with release.sh
    for dir in "$HOME/code"/*; do
        [ ! -d "$dir" ] && continue
        
        local project_name=$(basename "$dir")
        local project_release="$dir/release.sh"
        
        # Skip if no release.sh exists
        [ ! -f "$project_release" ] && continue
        
        projects_checked=$((projects_checked + 1))
        
        # Compare with source
        if cmp -s "$source_release" "$project_release"; then
            # Files are identical, skip
            continue
        fi
        
        # Files are different, need to update
        cd "$dir" || continue
        
        # Check if repo is dirty
        if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
            dirty_projects+=("$project_name")
            cd "$current_dir"
            continue
        fi
        
        # Copy the new release.sh
        echo "📝 Updating release.sh in $project_name"
        cp "$source_release" "$project_release" || {
            echo "Error: Failed to copy release.sh to $project_name" >&2
            cd "$current_dir"
            continue
        }
        
        # Create commit
        commit-composer || {
            echo "Error: Failed to create commit in $project_name" >&2
            # Revert the change
            git reset --hard >/dev/null 2>&1
            cd "$current_dir"
            continue
        }
        
        updated_projects+=("$project_name")
        projects_updated=$((projects_updated + 1))
        
        cd "$current_dir"
    done
    
    # Summary
    echo
    echo "═══════════════════════════════════════════════════════════"
    echo "✅ Checked $projects_checked projects with release.sh"
    echo "📦 Updated $projects_updated projects"
    
    if [ ${#updated_projects[@]} -gt 0 ]; then
        echo
        echo "Updated projects:"
        for project in "${updated_projects[@]}"; do
            echo "  - $project"
        done
    fi
    
    if [ ${#dirty_projects[@]} -gt 0 ]; then
        echo
        echo -e "\033[31m⚠️  The following projects were skipped due to uncommitted changes:\033[0m"
        for project in "${dirty_projects[@]}"; do
            echo -e "\033[31m  - $project\033[0m"
        done
        echo -e "\033[31mCommit or discard changes in these projects before updating release.sh\033[0m"
    fi
}

git-grep-all() {
    if [ $# -eq 0 ]; then
        echo "Error: git-grep-all requires arguments to pass to git grep" >&2
        echo "Usage: git-grep-all <git-grep-arguments>" >&2
        return 1
    fi
    
    local current_dir=$(pwd)
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local output_file="/tmp/git-grep-all-${timestamp}.md"
    local repos_searched=0
    local repos_with_results=0
    
    # Create markdown header
    echo "# Git Grep Results" > "$output_file"
    echo "Generated: $(date)" >> "$output_file"
    echo "Search arguments: \`git grep $@\`" >> "$output_file"
    echo "" >> "$output_file"
    
    echo "Searching all git repositories in ~/code..."
    
    # Find all directories with .git
    for dir in "$HOME/code"/*; do
        [ ! -d "$dir/.git" ] && continue
        
        local project_name=$(basename "$dir")
        cd "$dir" || continue
        
        repos_searched=$((repos_searched + 1))
        
        # Run git grep and capture output
        local grep_output=$(git grep "$@" 2>/dev/null)
        
        if [ -n "$grep_output" ]; then
            repos_with_results=$((repos_with_results + 1))
            echo "Found matches in: $project_name"
            
            # Add to markdown
            echo "## $project_name" >> "$output_file"
            echo '```' >> "$output_file"
            echo "$grep_output" >> "$output_file"
            echo '```' >> "$output_file"
            echo "" >> "$output_file"
        fi
        
        cd "$current_dir"
    done
    
    # Add summary
    echo "" >> "$output_file"
    echo "---" >> "$output_file"
    echo "Searched $repos_searched repositories, found results in $repos_with_results" >> "$output_file"
    
    if [ "$repos_with_results" -eq 0 ]; then
        echo "No matches found in any repository"
        rm "$output_file"
        return 0
    fi
    
    # Create gist
    echo "Creating gist..."
    
    # Check if we're in SSH session or have no display
    if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
        # SSH or no display - just create gist without opening
        local gist_url=$(gist "$output_file")
        
        if [ -n "$gist_url" ]; then
            echo
            echo "═══════════════════════════════════════════════════════════"
            echo "Gist URL: $gist_url"
            echo "═══════════════════════════════════════════════════════════"
            echo
        else
            echo "Failed to create gist"
        fi
    else
        # Local session with display - create and open gist
        local gist_url=$(gist "$output_file" --open)
        
        if [ -n "$gist_url" ]; then
            # Show notification
            notify-send "Git Grep Complete" "Found results in $repos_with_results repositories. Gist created and opened."
            
            echo
            echo "Gist URL: $gist_url"
            echo "(Opened in browser)"
            echo
        else
            echo "Failed to create gist"
        fi
    fi
    
    echo "Results saved to: $output_file"
}

show-dirty-projects() {
    local current_dir=$(pwd)
    local dirty_count=0
    local total_count=0
    local show_details=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--details)
                show_details=true
                shift
                ;;
            *)
                echo "Usage: show-dirty-projects [-d|--details]" >&2
                return 1
                ;;
        esac
    done
    
    echo -e "\033[1m📁 Checking projects in ~/code...\033[0m"
    echo
    
    # Iterate through directories in ~/code
    for dir in "$HOME/code"/*; do
        [ ! -d "$dir" ] && continue
        
        local project_name=$(basename "$dir")
        
        # Skip special directories
        [ "$project_name" = "backups" ] && continue
        [ "$project_name" = "worktrees" ] && continue
        
        # Check if it's a git repo
        [ ! -d "$dir/.git" ] && continue
        
        total_count=$((total_count + 1))
        
        cd "$dir" || continue
        
        # Check for uncommitted changes
        local status_output=$(git status --porcelain 2>/dev/null)
        
        if [ -n "$status_output" ]; then
            dirty_count=$((dirty_count + 1))
            
            # Count different types of changes
            local modified_count=$(echo "$status_output" | grep -c "^ M")
            local added_count=$(echo "$status_output" | grep -c "^A ")
            local deleted_count=$(echo "$status_output" | grep -c "^D ")
            local untracked_count=$(echo "$status_output" | grep -c "^??")
            local total_changes=$(echo "$status_output" | wc -l)
            
            # Display project with change summary
            echo -e "\033[31m✗\033[0m \033[1m$project_name\033[0m"
            echo -n "  "
            
            local summary=""
            [ $modified_count -gt 0 ] && summary="${summary}${modified_count} modified, "
            [ $added_count -gt 0 ] && summary="${summary}${added_count} added, "
            [ $deleted_count -gt 0 ] && summary="${summary}${deleted_count} deleted, "
            [ $untracked_count -gt 0 ] && summary="${summary}${untracked_count} untracked, "
            
            # Remove trailing comma and space
            summary=${summary%, }
            
            echo -e "\033[90m($summary)\033[0m"
            
            # Show detailed status if requested
            if [ "$show_details" = true ]; then
                echo "$status_output" | sed 's/^/    /'
                echo
            fi
        fi
        
        cd "$current_dir"
    done
    
    # Summary
    echo
    echo -e "\033[1m═══════════════════════════════════════════════════════════\033[0m"
    
    if [ $dirty_count -eq 0 ]; then
        echo -e "\033[32m✓ All $total_count projects are clean!\033[0m"
    else
        echo -e "\033[33m⚠️  Found $dirty_count dirty projects out of $total_count total\033[0m"
        
        if [ "$show_details" = false ]; then
            echo -e "\033[90mRun 'show-dirty-projects --details' to see file changes\033[0m"
        fi
    fi
}

commit-dirty-projects() {
    local current_dir=$(pwd)
    local dirty_count=0
    local committed_count=0
    local failed_count=0
    local dry_run=false
    local failed_projects=()
    local succeeded_projects=()
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run|-d)
                dry_run=true
                shift
                ;;
            *)
                echo "Usage: commit-dirty-projects [--dry-run|-d]" >&2
                return 1
                ;;
        esac
    done
    
    echo -e "\033[1m🔍 Finding dirty projects in ~/code...\033[0m"
    echo
    
    # First, find all dirty projects
    local dirty_projects=()
    for dir in "$HOME/code"/*; do
        [ ! -d "$dir" ] && continue
        
        local project_name=$(basename "$dir")
        
        # Skip special directories
        [ "$project_name" = "backups" ] && continue
        [ "$project_name" = "worktrees" ] && continue
        
        # Check if it's a git repo
        [ ! -d "$dir/.git" ] && continue
        
        cd "$dir" || continue
        
        # Check for uncommitted changes
        if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
            dirty_projects+=("$dir")
            dirty_count=$((dirty_count + 1))
        fi
        
        cd "$current_dir"
    done
    
    if [ ${#dirty_projects[@]} -eq 0 ]; then
        echo -e "\033[32m✓ No dirty projects found!\033[0m"
        return 0
    fi
    
    echo -e "\033[33mFound $dirty_count dirty projects:\033[0m"
    for project_dir in "${dirty_projects[@]}"; do
        echo "  - $(basename "$project_dir")"
    done
    echo
    
    if [ "$dry_run" = true ]; then
        echo -e "\033[36m🔸 DRY RUN MODE - No commits will be created\033[0m"
        echo
    fi
    
    # Process each dirty project
    for project_dir in "${dirty_projects[@]}"; do
        local project_name=$(basename "$project_dir")
        
        echo -e "\033[1m📦 Processing: $project_name\033[0m"
        
        cd "$project_dir" || {
            echo -e "\033[31m  ✗ Failed to change to directory\033[0m"
            failed_count=$((failed_count + 1))
            failed_projects+=("$project_name")
            continue
        }
        
        if [ "$dry_run" = true ]; then
            echo -e "\033[36m  Would run: rm -rf .claude && commit-composer\033[0m"
            
            # Show what changes would be committed
            local status_output=$(git status --porcelain)
            local change_count=$(echo "$status_output" | wc -l)
            echo -e "\033[90m  Changes to be committed: $change_count files\033[0m"
        else
            # Remove .claude directory
            rm -rf .claude
            
            # Run commit-composer
            if commit-composer; then
                echo -e "\033[32m  ✓ Successfully committed\033[0m"
                committed_count=$((committed_count + 1))
                succeeded_projects+=("$project_name")
            else
                echo -e "\033[31m  ✗ Failed to create commit\033[0m"
                failed_count=$((failed_count + 1))
                failed_projects+=("$project_name")
            fi
        fi
        
        echo
        cd "$current_dir"
    done
    
    # Summary
    echo -e "\033[1m═══════════════════════════════════════════════════════════\033[0m"
    
    if [ "$dry_run" = true ]; then
        echo -e "\033[36m🔸 DRY RUN SUMMARY:\033[0m"
        echo -e "\033[36m   Would process $dirty_count projects\033[0m"
        echo
        echo -e "\033[90mRun 'commit-dirty-projects' without --dry-run to create commits\033[0m"
    else
        echo -e "\033[1mSUMMARY:\033[0m"
        echo -e "  Total dirty projects: $dirty_count"
        
        if [ $committed_count -gt 0 ]; then
            echo -e "  \033[32m✓ Successfully committed: $committed_count\033[0m"
            for project in "${succeeded_projects[@]}"; do
                echo -e "    \033[32m- $project\033[0m"
            done
        fi
        
        if [ $failed_count -gt 0 ]; then
            echo -e "  \033[31m✗ Failed: $failed_count\033[0m"
            for project in "${failed_projects[@]}"; do
                echo -e "    \033[31m- $project\033[0m"
            done
        fi
    fi
}

show-repo-visibility() {
    local current_dir=$(pwd)
    local public_count=0
    local private_count=0
    local no_remote_count=0
    local error_count=0
    local total_count=0
    
    echo -e "\033[1m🔍 Checking repository visibility in ~/code...\033[0m"
    echo
    
    # Arrays to store repos by category
    local public_repos=()
    local private_repos=()
    local no_remote_repos=()
    local error_repos=()
    
    # Iterate through directories in ~/code
    for dir in "$HOME/code"/*; do
        [ ! -d "$dir" ] && continue
        
        local project_name=$(basename "$dir")
        
        # Skip special directories
        [ "$project_name" = "backups" ] && continue
        [ "$project_name" = "worktrees" ] && continue
        
        # Check if it's a git repo
        [ ! -d "$dir/.git" ] && continue
        
        total_count=$((total_count + 1))
        
        cd "$dir" || continue
        
        # Check if repo has a remote
        local remote_url=$(git config --get remote.origin.url 2>/dev/null)
        
        if [ -z "$remote_url" ]; then
            no_remote_count=$((no_remote_count + 1))
            no_remote_repos+=("$project_name")
            cd "$current_dir"
            continue
        fi
        
        # Use gh repo view in the current directory
        local visibility=$(gh repo view --json visibility 2>/dev/null | jq -r '.visibility' 2>/dev/null)
        
        if [ -n "$visibility" ]; then
            if [ "$visibility" = "PUBLIC" ]; then
                public_count=$((public_count + 1))
                public_repos+=("$project_name")
            elif [ "$visibility" = "PRIVATE" ]; then
                private_count=$((private_count + 1))
                private_repos+=("$project_name")
            else
                error_count=$((error_count + 1))
                error_repos+=("$project_name (unknown visibility: $visibility)")
            fi
        else
            error_count=$((error_count + 1))
            error_repos+=("$project_name (unable to determine visibility)")
        fi
        
        cd "$current_dir"
    done
    
    # Display results
    if [ ${#public_repos[@]} -gt 0 ]; then
        echo -e "\033[32m🌐 Public repositories ($public_count):\033[0m"
        for repo in "${public_repos[@]}"; do
            echo "  - $repo"
        done
        echo
    fi
    
    if [ ${#private_repos[@]} -gt 0 ]; then
        echo -e "\033[33m🔒 Private repositories ($private_count):\033[0m"
        for repo in "${private_repos[@]}"; do
            echo "  - $repo"
        done
        echo
    fi
    
    if [ ${#no_remote_repos[@]} -gt 0 ]; then
        echo -e "\033[90m📁 Local only (no remote) ($no_remote_count):\033[0m"
        for repo in "${no_remote_repos[@]}"; do
            echo "  - $repo"
        done
        echo
    fi
    
    if [ ${#error_repos[@]} -gt 0 ]; then
        echo -e "\033[31m❌ Errors ($error_count):\033[0m"
        for repo in "${error_repos[@]}"; do
            echo "  - $repo"
        done
        echo
    fi
    
    # Summary
    echo -e "\033[1m═══════════════════════════════════════════════════════════\033[0m"
    echo -e "\033[1mTotal repositories scanned: $total_count\033[0m"
}
