worktree-create() {
    local no_cd=false
    if [[ "$1" == "--no-cd" ]]; then
        no_cd=true
        shift
    fi
    
    # Check if we're already in a worktree directory
    if [[ "$PWD" == */worktrees/*-worktree-* ]]; then
        echo "Error: Cannot create a worktree inside a worktree" >&2
        return 1
    fi
    
    worktrees_dir="$(dirname "$PWD")/worktrees"
    mkdir -p "$worktrees_dir"
    i=1
    while [ -e "$worktrees_dir/$(basename "$PWD")-worktree-$(printf "%03d" "$i")" ] || git branch --list "worktree-$(printf "%03d" "$i")" | grep -q .; do
        i=$((i+1))
    done
    num=$(printf "%03d" $i)
    dir="$worktrees_dir/$(basename "$PWD")-worktree-$num"
    
    # Create the worktree with quiet flag, redirecting any remaining output to stderr
    if ! git worktree add -q "$dir" -b "worktree-$num" 2>&1 >&2; then
        echo "Error: Failed to create worktree" >&2
        return 1
    fi
    
    # Change directory if not using --no-cd
    if [[ "$no_cd" == false ]]; then
        cd "$dir" || return 1
    fi
    
    # Install dependencies if lock files exist
    if [ -f "$dir/pnpm-lock.yaml" ]; then
        (cd "$dir" && pnpm install >&2 2>&1)
    fi
    
    if [ -f "$dir/uv.lock" ]; then
        (cd "$dir" && uv sync >&2 2>&1)
    fi
    
    # Output the directory path to stdout only when using --no-cd
    if [[ "$no_cd" == true ]]; then
        echo "$dir"
    fi
}

worktree-kill() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != */worktrees/*-worktree-* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Navigate to the main project directory
    cd "$(dirname "$(dirname "$worktree_path")")/$project_name"

    # Remove the worktree
    git worktree remove --force "$worktree_path"

    echo "Removed worktree: $branch"
}

worktree-sync() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != */worktrees/*-worktree-* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Check for pending changes
    if ! git diff-index --quiet HEAD -- || ! git diff --cached --quiet; then
        echo "Error: There are pending changes in the worktree. Please commit or stash them first."
        return 1
    fi

    # Check for untracked files
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        echo "Error: There are untracked files in the worktree. Please add or remove them first."
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Save current directory
    local original_dir="$PWD"
    
    # Navigate to the main project directory
    main_dir="$(dirname "$(dirname "$worktree_path")")/$project_name"
    
    # Run operations in main directory
    (
        cd "$main_dir" || exit 1
        
        # Switch to main branch
        git checkout main || exit 1
        
        # Update main branch with latest changes
        git pull origin main || exit 1
        
        # Perform fast-forward merge from the worktree branch
        if git merge --ff-only "$branch"; then
            echo "Successfully fast-forward merged $branch into main"
            
            # Push the changes to origin
            if git push origin HEAD -u; then
                echo "Successfully pushed changes to origin"
            else
                echo "Warning: Failed to push changes to origin"
            fi
            
            # Success
            exit 0
        else
            echo "Error: Cannot fast-forward merge. The worktree branch may have diverged from main."
            echo "Consider rebasing the worktree branch on main first."
            exit 1
        fi
    )
    
    # Check if the subshell succeeded
    if [ $? -eq 0 ]; then
        # Fast-forward merge succeeded, return to original directory
        cd "$original_dir"
        return 0
    else
        # Fast-forward merge failed, make sure we're back in the worktree
        cd "$original_dir"
        return 1
    fi
}
