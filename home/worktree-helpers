worktree-create() {
    local no_cd=false
    if [[ "$1" == "--no-cd" ]]; then
        no_cd=true
        shift
    fi
    
    # Check if we're already in a worktree directory
    if [[ "$PWD" == */worktrees/*-worktree-* ]]; then
        echo "Error: Cannot create a worktree inside a worktree" >&2
        return 1
    fi
    
    worktrees_dir="$(dirname "$PWD")/worktrees"
    mkdir -p "$worktrees_dir"
    i=1
    while [ -e "$worktrees_dir/$(basename "$PWD")-worktree-$(printf "%03d" "$i")" ] || git branch --list "worktree-$(printf "%03d" "$i")" | grep -q .; do
        i=$((i+1))
    done
    num=$(printf "%03d" $i)
    dir="$worktrees_dir/$(basename "$PWD")-worktree-$num"
    
    # Create the worktree with quiet flag, redirecting any remaining output to stderr
    if ! git worktree add -q "$dir" -b "worktree-$num" 2>&1 >&2; then
        echo "Error: Failed to create worktree" >&2
        return 1
    fi
    
    # Change directory if not using --no-cd
    if [[ "$no_cd" == false ]]; then
        cd "$dir" || return 1
    fi
    
    # Install dependencies if lock files exist
    if [ -f "$dir/pnpm-lock.yaml" ]; then
        (cd "$dir" && pnpm install >&2 2>&1)
    fi
    
    if [ -f "$dir/uv.lock" ]; then
        (cd "$dir" && uv sync >&2 2>&1)
    fi
    
    # Output the directory path to stdout only when using --no-cd
    if [[ "$no_cd" == true ]]; then
        echo "$dir"
    fi
}

worktree-kill() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != */worktrees/*-worktree-* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Navigate to the main project directory
    cd "$(dirname "$(dirname "$worktree_path")")/$project_name"

    # Remove the worktree
    git worktree remove --force "$worktree_path"

    echo "Removed worktree: $branch"
}

worktree-merge() {
    # Check if we're in a worktree directory
    if [[ "$PWD" != */worktrees/*-worktree-* ]]; then
        echo "Error: Not in a worktree directory"
        return 1
    fi

    # Check for pending changes
    if ! git diff-index --quiet HEAD -- || ! git diff --cached --quiet; then
        echo "Error: There are pending changes in the worktree. Please commit or stash them first."
        return 1
    fi

    # Check for untracked files
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        echo "Error: There are untracked files in the worktree. Please add or remove them first."
        return 1
    fi

    # Get the branch name (current branch)
    branch=$(git branch --show-current)

    # Get the worktree path
    worktree_path="$PWD"

    # Extract the project name from the worktree directory name
    # e.g., from "foo-worktree-001" extract "foo"
    worktree_dirname=$(basename "$worktree_path")
    project_name=${worktree_dirname%-worktree-*}

    # Save current directory
    local original_dir="$PWD"
    
    # Navigate to the main project directory
    main_dir="$(dirname "$(dirname "$worktree_path")")/$project_name"
    
    # Run operations in main directory
    (
        cd "$main_dir" || exit 1
        
        # Switch to main branch
        git checkout main || exit 1
        
        # Update main branch with latest changes
        git pull origin main || exit 1
        
        # Go back to worktree to rebase
        cd "$original_dir" || exit 1
        
        # Rebase the worktree branch against main
        if ! git rebase main; then
            echo "Error: Rebase failed. Please resolve conflicts and try again."
            echo "You are in: $(pwd)"
            exit 1
        fi
        
        # Go back to main directory for cherry-pick
        cd "$main_dir" || exit 1
        
        # Cherry-pick all commits from the worktree branch
        if git cherry-pick main.."$branch"; then
            echo "Successfully cherry-picked commits from $branch into main"
            
            # Push the changes to origin
            if git push origin HEAD -u; then
                echo "Successfully pushed changes to origin"
            else
                echo "Warning: Failed to push changes to origin"
            fi
            
            # Success - we'll handle worktree removal outside the subshell
            exit 0
        else
            echo "Error: Cherry-pick failed. Please resolve conflicts manually."
            echo "You are in: $(pwd)"
            echo "To return to worktree, run: cd $worktree_path"
            exit 1
        fi
    )
    
    # Check if the subshell succeeded
    if [ $? -eq 0 ]; then
        # Cherry-pick succeeded, remove the worktree
        worktree-kill
    else
        # Cherry-pick failed, make sure we're back in the worktree
        cd "$original_dir"
        return 1
    fi
}

worktree-finish() {
    # Save current tmux session name
    local current_session=$(tmux display-message -p '#S')
    
    # Run context-composer
    if context-composer work commit-composer; then
        # Context-composer succeeded, try worktree-merge (but don't fail if it doesn't work)
        worktree-merge || true
        
        # Get a different session to switch to (previous or any other)
        local target_session=$(tmux list-sessions -F '#{session_name}' | grep -v "^${current_session}$" | head -1)
        
        if [ -n "$target_session" ]; then
            # Switch to the other session first
            tmux switch-client -t "$target_session"
            # Then kill the worktree session
            tmux kill-session -t "$current_session"
        else
            echo "Error: No other tmux session to switch to"
            return 1
        fi
    else
        echo "Error: context-composer failed"
        return 1
    fi
}